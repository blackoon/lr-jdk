# NIO入门

网络编程的基本模型是Client/Server模型，也就是两个进程之间相互通信，其中服务端提供位置信息（绑定的IP地址和监听端口），客户端通过连接操作
向服务端监听的地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方就可以通过网络套接字（socket）进行通信

* 传统的同步阻塞式I/O编程 （bio）
	1. 一个新的客户端请求接入时，服务端必须创建一个新的线程处理新接入的客户端链路，一个线程只能处理一个客户端请求。
	2. 为了改进一线程一连接模型，后来又演进出了一种通过线程池或者消息队列实现1个或者多个线程处理N个客户端的模型
	3. 底层通信机制依然使用同步阻塞I/o,所以被称为伪异步
* 伪异步I/O编程（pio）
	1. 阻塞根源在于 同步输入输出API
* 基于NIO的非阻塞编程
	1. Non-block I/O,弥补同步阻塞I/o的不足。
	2. 缓冲区 Buffer
		在面向流的I/O中，可以将数据直接写入或者将数据直接读取到Stream对象中，在NIO库中，所有数据都要用缓冲区处理。
		实际上就是一个数组。一般使用ByteBuffer
	3. 通道Channel
		通道与流的不同之处在于通道是双向的，流只是在一个方向上移动(一个流必须是InputStream或者OutputStream的子类)
		而通道可以直接用于读写或者同时用于读写
		channel可以分两大类：分别是网络读写的SelectableChannel和用于文件操作的FileChannel
	4. 多路复用器Selector
		java NIO编程的基础，熟练地掌握Selector对于掌握NIO编程至关重要。
* 基于NIO2.0 的异步非阻塞（AIO）编程

* 为什么要使用BIO编程

* 为什么选择Netty
